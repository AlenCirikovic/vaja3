// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  images   Image[]
  comments Comment[]
  votes    Vote[]
}

model Image {
  id        String   @id @default(uuid())
  title     String
  message   String?
  imageUrl  String
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]
  votes    Vote[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  image   Image  @relation(fields: [imageId], references: [id])
  imageId String
}

model Vote {
  id        String   @id @default(uuid())
  voteType  Int // 1 = like, -1 = dislike
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  image   Image  @relation(fields: [imageId], references: [id])
  imageId String

  @@unique([userId, imageId]) // en uporabnik lahko glasuje samo enkrat na sliko
}
